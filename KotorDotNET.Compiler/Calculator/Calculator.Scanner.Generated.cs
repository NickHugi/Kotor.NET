//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  DateTime: 24/09/2023 10:25:01 PM
//  GPLEX input file <Calculator\Calculator.Language.analyzer.lex - 24/09/2023 10:25:01 PM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: verbose, parser, stack, minimize
//  Option settings: compressNext, persistBuffer, noEmbedBuffers
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define STACK
#define PERSIST
#define BYTEMODE

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;

using QUT.GplexBuffers;

namespace KotorDotNET.Compiler.Calculator
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     internal enum Token
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     internal abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     internal interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     internal sealed partial class CalculatorScanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     internal sealed partial class CalculatorScanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Token).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 196;
        const int initial = 197;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {197, 0};

    static Table[] NxS = new Table[215] {
/* NxS[   0] */ new Table(0, 0, 0, null), // Shortest string ""
/* NxS[   1] */ // Shortest string "\t"
      new Table(9, 24, -1, new short[] {1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1}),
/* NxS[   2] */ // Shortest string "\n"
      new Table(10, 1, -1, new short[] {2}),
/* NxS[   3] */ // Shortest string "!"
      new Table(61, 1, -1, new short[] {196}),
/* NxS[   4] */ new Table(0, 0, -1, null), // Shortest string "%"
/* NxS[   5] */ // Shortest string "&"
      new Table(38, 1, -1, new short[] {193}),
/* NxS[   6] */ new Table(0, 0, -1, null), // Shortest string "("
/* NxS[   7] */ new Table(0, 0, -1, null), // Shortest string ")"
/* NxS[   8] */ // Shortest string "*"
      new Table(61, 1, -1, new short[] {192}),
/* NxS[   9] */ // Shortest string "+"
      new Table(43, 19, -1, new short[] {190, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191}),
/* NxS[  10] */ new Table(0, 0, -1, null), // Shortest string ","
/* NxS[  11] */ // Shortest string "-"
      new Table(45, 17, -1, new short[] {188, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 189}),
/* NxS[  12] */ // Shortest string "/"
      new Table(42, 20, -1, new short[] {204, -1, -1, -1, -1, 205, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185}),
/* NxS[  13] */ // Shortest string "0"
      new Table(46, 75, -1, new short[] {202, -1, 181, 181, 181, 181, 
          181, 181, 181, 181, 181, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, 203}),
/* NxS[  14] */ // Shortest string "1"
      new Table(46, 57, -1, new short[] {202, -1, 181, 181, 181, 181, 
          181, 181, 181, 181, 181, 181, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 182}),
/* NxS[  15] */ new Table(0, 0, -1, null), // Shortest string ";"
/* NxS[  16] */ // Shortest string "<"
      new Table(60, 1, -1, new short[] {180}),
/* NxS[  17] */ // Shortest string "="
      new Table(61, 1, -1, new short[] {179}),
/* NxS[  18] */ // Shortest string ">"
      new Table(61, 2, -1, new short[] {177, 178}),
/* NxS[  19] */ // Shortest string "A"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  20] */ // Shortest string "F"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 173, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  21] */ // Shortest string "O"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 156, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  22] */ // Shortest string "T"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 153, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  23] */ new Table(0, 0, -1, null), // Shortest string "^"
/* NxS[  24] */ // Shortest string "a"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 147, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  25] */ // Shortest string "b"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 143, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  26] */ // Shortest string "c"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 133, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 134, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  27] */ // Shortest string "d"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 126, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 127, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  28] */ // Shortest string "e"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          114, 19, 19, 19, 19, 19, 115, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          116, 19, 19, 19, 19}),
/* NxS[  29] */ // Shortest string "f"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 110, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  30] */ // Shortest string "i"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          96, 19, 19, 19, 19, 19, 19, 19, 97, 19, 19, 19, 19, 19, 98, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  31] */ // Shortest string "l"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 89, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  32] */ // Shortest string "n"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 87, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  33] */ // Shortest string "o"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 82, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  34] */ // Shortest string "r"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 77, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  35] */ // Shortest string "s"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 64, 19, 
          19, 65, 19, 19, 19}),
/* NxS[  36] */ // Shortest string "t"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 59, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  37] */ // Shortest string "v"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 51, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 52, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  38] */ // Shortest string "w"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 44, 19, 19, 19, 19, 
          19, 19, 45, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  39] */ new Table(0, 0, -1, null), // Shortest string "{"
/* NxS[  40] */ // Shortest string "|"
      new Table(124, 1, -1, new short[] {43}),
/* NxS[  41] */ new Table(0, 0, -1, null), // Shortest string "}"
/* NxS[  42] */ new Table(0, 0, -1, null), // Shortest string "~"
/* NxS[  43] */ new Table(0, 0, -1, null), // Shortest string "||"
/* NxS[  44] */ // Shortest string "wa"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 49, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  45] */ // Shortest string "wh"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 46, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  46] */ // Shortest string "whi"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 47, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  47] */ // Shortest string "whil"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 48, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  48] */ // Shortest string "while"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  49] */ // Shortest string "wal"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 50, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  50] */ // Shortest string "wall"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  51] */ // Shortest string "ve"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 55, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  52] */ // Shortest string "vo"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 53, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  53] */ // Shortest string "voi"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 54, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  54] */ // Shortest string "void"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  55] */ // Shortest string "vec"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 56, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  56] */ // Shortest string "vect"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 57, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  57] */ // Shortest string "vecto"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 58, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  58] */ // Shortest string "vector"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  59] */ // Shortest string "ta"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 60, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  60] */ // Shortest string "tal"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 61, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  61] */ // Shortest string "tale"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 62, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  62] */ // Shortest string "talen"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 63, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  63] */ // Shortest string "talent"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  64] */ // Shortest string "st"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 70, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  65] */ // Shortest string "sw"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 66, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  66] */ // Shortest string "swi"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 67, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  67] */ // Shortest string "swit"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 68, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  68] */ // Shortest string "switc"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 69, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  69] */ // Shortest string "switch"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  70] */ // Shortest string "str"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 71, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 72, 
          19, 19, 19, 19, 19}),
/* NxS[  71] */ // Shortest string "stri"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 75, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  72] */ // Shortest string "stru"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 73, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  73] */ // Shortest string "struc"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 74, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  74] */ // Shortest string "struct"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  75] */ // Shortest string "strin"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 76, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  76] */ // Shortest string "string"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  77] */ // Shortest string "re"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 78, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  78] */ // Shortest string "ret"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 79, 
          19, 19, 19, 19, 19}),
/* NxS[  79] */ // Shortest string "retu"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 80, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  80] */ // Shortest string "retur"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 81, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  81] */ // Shortest string "return"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  82] */ // Shortest string "ob"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 83, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  83] */ // Shortest string "obj"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 84, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  84] */ // Shortest string "obje"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 85, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  85] */ // Shortest string "objec"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 86, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  86] */ // Shortest string "object"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  87] */ // Shortest string "no"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 88, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  88] */ // Shortest string "nop"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  89] */ // Shortest string "lo"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 90, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  90] */ // Shortest string "loc"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 91, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  91] */ // Shortest string "loca"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 92, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  92] */ // Shortest string "locat"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 93, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  93] */ // Shortest string "locati"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 94, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  94] */ // Shortest string "locatio"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 95, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  95] */ // Shortest string "location"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  96] */ // Shortest string "if"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  97] */ // Shortest string "in"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 109, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  98] */ // Shortest string "it"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 99, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[  99] */ // Shortest string "ite"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 100, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 100] */ // Shortest string "item"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 101, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 101] */ // Shortest string "itemp"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 102, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 102] */ // Shortest string "itempr"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 103, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 103] */ // Shortest string "itempro"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 104, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 104] */ // Shortest string "itemprop"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 105, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 105] */ // Shortest string "itemprope"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 106, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 106] */ // Shortest string "itemproper"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 107, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 107] */ // Shortest string "itempropert"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 108, 19}),
/* NxS[ 108] */ // Shortest string "itemproperty"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 109] */ // Shortest string "int"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 110] */ // Shortest string "fl"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 111, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 111] */ // Shortest string "flo"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 112, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 112] */ // Shortest string "floa"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 113, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 113] */ // Shortest string "float"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 114] */ // Shortest string "ef"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          122, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 115] */ // Shortest string "el"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 120, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 116] */ // Shortest string "ev"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 117, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 117] */ // Shortest string "eve"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 118, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 118] */ // Shortest string "even"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 119, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 119] */ // Shortest string "event"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 120] */ // Shortest string "els"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 121, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 121] */ // Shortest string "else"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 122] */ // Shortest string "eff"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 123, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 123] */ // Shortest string "effe"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 124, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 124] */ // Shortest string "effec"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 125, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 125] */ // Shortest string "effect"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 126] */ // Shortest string "de"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          128, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 127] */ // Shortest string "do"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 128] */ // Shortest string "def"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 129, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 129] */ // Shortest string "defa"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 130, 
          19, 19, 19, 19, 19}),
/* NxS[ 130] */ // Shortest string "defau"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 131, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 131] */ // Shortest string "defaul"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 132, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 132] */ // Shortest string "default"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 133] */ // Shortest string "ca"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 141, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 134] */ // Shortest string "co"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 135, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 135] */ // Shortest string "con"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 136, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 136] */ // Shortest string "cont"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 137, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 137] */ // Shortest string "conti"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 138, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 138] */ // Shortest string "contin"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 139, 
          19, 19, 19, 19, 19}),
/* NxS[ 139] */ // Shortest string "continu"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 140, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 140] */ // Shortest string "continue"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 141] */ // Shortest string "cas"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 142, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 142] */ // Shortest string "case"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 143] */ // Shortest string "br"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 144, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 144] */ // Shortest string "bre"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 145, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 145] */ // Shortest string "brea"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 146, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 146] */ // Shortest string "break"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 147] */ // Shortest string "ac"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 148, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 148] */ // Shortest string "act"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 149, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 149] */ // Shortest string "acti"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 150, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 150] */ // Shortest string "actio"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 151, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 151] */ // Shortest string "action"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 152] */ new Table(0, 0, -1, null), // Shortest string "\\<="
/* NxS[ 153] */ // Shortest string "TR"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 154, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 154] */ // Shortest string "TRU"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 155, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 155] */ // Shortest string "TRUE"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 156] */ // Shortest string "OB"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 157, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 157] */ // Shortest string "OBJ"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 158, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 158] */ // Shortest string "OBJE"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 159, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 159] */ // Shortest string "OBJEC"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 160, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 160] */ // Shortest string "OBJECT"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 161, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 161] */ // Shortest string "OBJECT_"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 162, 19, 19, 19, 19, 19, 19, 19, 19, 19, 163, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 162] */ // Shortest string "OBJECT_I"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 167, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 163] */ // Shortest string "OBJECT_S"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 164, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 164] */ // Shortest string "OBJECT_SE"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 165, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 165] */ // Shortest string "OBJECT_SEL"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          166, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 166] */ // Shortest string "OBJECT_SELF"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 167] */ // Shortest string "OBJECT_IN"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          168, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 168] */ // Shortest string "OBJECT_INV"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 169, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 169] */ // Shortest string "OBJECT_INVA"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 170, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 170] */ // Shortest string "OBJECT_INVAL"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 171, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 171] */ // Shortest string "OBJECT_INVALI"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 172, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 172] */ // Shortest string "OBJECT_INVALID"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 173] */ // Shortest string "FA"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 174, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 174] */ // Shortest string "FAL"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 175, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 175] */ // Shortest string "FALS"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 176, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 176] */ // Shortest string "FALSE"
      new Table(48, 75, -1, new short[] {19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, -1, -1, -1, -1, 19, -1, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
          19, 19, 19, 19, 19}),
/* NxS[ 177] */ new Table(0, 0, -1, null), // Shortest string ">="
/* NxS[ 178] */ new Table(0, 0, -1, null), // Shortest string ">>"
/* NxS[ 179] */ new Table(0, 0, -1, null), // Shortest string "=="
/* NxS[ 180] */ new Table(0, 0, -1, null), // Shortest string "<<"
/* NxS[ 181] */ // Shortest string "00"
      new Table(46, 12, -1, new short[] {202, -1, 181, 181, 181, 181, 
          181, 181, 181, 181, 181, 181}),
/* NxS[ 182] */ new Table(0, 0, -1, null), // Shortest string "0f"
/* NxS[ 183] */ // Shortest string "0.0"
      new Table(48, 55, -1, new short[] {183, 183, 183, 183, 183, 183, 
          183, 183, 183, 183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          182}),
/* NxS[ 184] */ // Shortest string "0x0"
      new Table(48, 55, -1, new short[] {184, 184, 184, 184, 184, 184, 
          184, 184, 184, 184, -1, -1, -1, -1, -1, -1, -1, 184, 184, 184, 184, 184, 
          184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184, 184, 184, 184, 184, 
          184}),
/* NxS[ 185] */ new Table(0, 0, -1, null), // Shortest string "/="
/* NxS[ 186] */ new Table(0, 0, -1, null), // Shortest string "//\n"
/* NxS[ 187] */ new Table(0, 0, -1, null), // Shortest string "/**/"
/* NxS[ 188] */ new Table(0, 0, -1, null), // Shortest string "--"
/* NxS[ 189] */ new Table(0, 0, -1, null), // Shortest string "-="
/* NxS[ 190] */ new Table(0, 0, -1, null), // Shortest string "++"
/* NxS[ 191] */ new Table(0, 0, -1, null), // Shortest string "+="
/* NxS[ 192] */ new Table(0, 0, -1, null), // Shortest string "*="
/* NxS[ 193] */ new Table(0, 0, -1, null), // Shortest string "&&"
/* NxS[ 194] */ new Table(0, 0, -1, null), // Shortest string "#include"
/* NxS[ 195] */ new Table(0, 0, -1, null), // Shortest string "\"\""
/* NxS[ 196] */ new Table(0, 0, -1, null), // Shortest string "!="
/* NxS[ 197] */ // Shortest string ""
      new Table(9, 118, -1, new short[] {1, 2, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, 1, 3, 198, 199, -1, 4, 5, -1, 6, 7, 8, 9, 10, 11, -1, 
          12, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, -1, 15, 16, 17, 18, 
          -1, -1, 19, 19, 19, 19, 19, 20, 19, 19, 19, 19, 19, 19, 19, 19, 
          21, 19, 19, 19, 19, 22, 19, 19, 19, 19, 19, 19, -1, 200, -1, 23, 
          19, -1, 24, 25, 26, 27, 28, 29, 19, 19, 30, 19, 19, 31, 19, 32, 
          33, 19, 19, 34, 35, 36, 19, 37, 38, 19, 19, 19, 39, 40, 41, 42}),
/* NxS[ 198] */ // Shortest string "\""
      new Table(34, 1, 198, new short[] {195}),
/* NxS[ 199] */ // Shortest string "#"
      new Table(105, 1, -1, new short[] {209}),
/* NxS[ 200] */ // Shortest string "\\"
      new Table(60, 1, -1, new short[] {201}),
/* NxS[ 201] */ // Shortest string "\\<"
      new Table(61, 1, -1, new short[] {152}),
/* NxS[ 202] */ // Shortest string "0."
      new Table(48, 10, -1, new short[] {183, 183, 183, 183, 183, 183, 
          183, 183, 183, 183}),
/* NxS[ 203] */ // Shortest string "0x"
      new Table(48, 55, -1, new short[] {184, 184, 184, 184, 184, 184, 
          184, 184, 184, 184, -1, -1, -1, -1, -1, -1, -1, 184, 184, 184, 184, 184, 
          184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184, 184, 184, 184, 184, 
          184}),
/* NxS[ 204] */ // Shortest string "/*"
      new Table(42, 1, 204, new short[] {206}),
/* NxS[ 205] */ // Shortest string "//"
      new Table(10, 1, 205, new short[] {186}),
/* NxS[ 206] */ // Shortest string "/**"
      new Table(47, 17, -1, new short[] {187, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 207}),
/* NxS[ 207] */ // Shortest string "/**?"
      new Table(33, 1, -1, new short[] {208}),
/* NxS[ 208] */ // Shortest string "/**?!"
      new Table(47, 1, -1, new short[] {204}),
/* NxS[ 209] */ // Shortest string "#i"
      new Table(110, 1, -1, new short[] {210}),
/* NxS[ 210] */ // Shortest string "#in"
      new Table(99, 1, -1, new short[] {211}),
/* NxS[ 211] */ // Shortest string "#inc"
      new Table(108, 1, -1, new short[] {212}),
/* NxS[ 212] */ // Shortest string "#incl"
      new Table(117, 1, -1, new short[] {213}),
/* NxS[ 213] */ // Shortest string "#inclu"
      new Table(100, 1, -1, new short[] {214}),
/* NxS[ 214] */ // Shortest string "#includ"
      new Table(101, 1, -1, new short[] {194}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = (byte)(code - NxS[state].min);
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     internal CalculatorScanner(Stream file) {
            SetSource(file); // no unicode option
        }   
#endif // !NOFILES

     internal CalculatorScanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Token next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Token)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Token.EOF;
            break;
        case 1: // Recognized '{Space}+',	Shortest string "\t"
/* skip */
            break;
        case 2: // Recognized '{EOL}+',	Shortest string "\n"
/* skip */
            break;
        case 3: // Recognized '{NotOp}',	Shortest string "!"
return (int)Token.OP_NOT;
            break;
        case 4: // Recognized '{ModOp}',	Shortest string "%"
return (int)Token.OP_MODULUS;
            break;
        case 5: // Recognized '{BitwiseAndOp}',	Shortest string "&"
return (int)Token.OP_BITWISE_AND;
            break;
        case 6: // Recognized '{LPAREN}',	Shortest string "("
return '(';
            break;
        case 7: // Recognized '{RPAREN}',	Shortest string ")"
return ')';
            break;
        case 8: // Recognized '{MultiplyOp}',	Shortest string "*"
return (int)Token.OP_MULTIPLY;
            break;
        case 9: // Recognized '{AddOp}',	Shortest string "+"
return (int)Token.OP_ADD;
            break;
        case 10: // Recognized '{COMMA}',	Shortest string ","
return ',';
            break;
        case 11: // Recognized '{MinusOp}',	Shortest string "-"
return (int)Token.OP_SUBTRACT;
            break;
        case 12: // Recognized '{DivideOp}',	Shortest string "/"
return (int)Token.OP_DIVIDE;
            break;
        case 13: // Recognized '{IntLiteral}',	Shortest string "0"
        case 14: // Recognized '{IntLiteral}',	Shortest string "1"
        case 181: // Recognized '{IntLiteral}',	Shortest string "00"
yylval.numberi=Int32.Parse(yytext); return (int)Token.LITERAL_INT;
            break;
        case 15: // Recognized '{SEPERATOR}',	Shortest string ";"
return ';';
            break;
        case 16: // Recognized '{LesserOp}',	Shortest string "<"
return (int)Token.OP_LESS_THAN;
            break;
        case 17: // Recognized '{ASSIGNMENT}',	Shortest string "="
return '=';
            break;
        case 18: // Recognized '{GreaterOp}',	Shortest string ">"
return (int)Token.OP_GREATER_THAN;
            break;
        case 19: // Recognized '{Identifier}',	Shortest string "A"
        case 20: // Recognized '{Identifier}',	Shortest string "F"
        case 21: // Recognized '{Identifier}',	Shortest string "O"
        case 22: // Recognized '{Identifier}',	Shortest string "T"
        case 24: // Recognized '{Identifier}',	Shortest string "a"
        case 25: // Recognized '{Identifier}',	Shortest string "b"
        case 26: // Recognized '{Identifier}',	Shortest string "c"
        case 27: // Recognized '{Identifier}',	Shortest string "d"
        case 28: // Recognized '{Identifier}',	Shortest string "e"
        case 29: // Recognized '{Identifier}',	Shortest string "f"
        case 30: // Recognized '{Identifier}',	Shortest string "i"
        case 31: // Recognized '{Identifier}',	Shortest string "l"
        case 32: // Recognized '{Identifier}',	Shortest string "n"
        case 33: // Recognized '{Identifier}',	Shortest string "o"
        case 34: // Recognized '{Identifier}',	Shortest string "r"
        case 35: // Recognized '{Identifier}',	Shortest string "s"
        case 36: // Recognized '{Identifier}',	Shortest string "t"
        case 37: // Recognized '{Identifier}',	Shortest string "v"
        case 38: // Recognized '{Identifier}',	Shortest string "w"
        case 44: // Recognized '{Identifier}',	Shortest string "wa"
        case 45: // Recognized '{Identifier}',	Shortest string "wh"
        case 46: // Recognized '{Identifier}',	Shortest string "whi"
        case 47: // Recognized '{Identifier}',	Shortest string "whil"
        case 49: // Recognized '{Identifier}',	Shortest string "wal"
        case 51: // Recognized '{Identifier}',	Shortest string "ve"
        case 52: // Recognized '{Identifier}',	Shortest string "vo"
        case 53: // Recognized '{Identifier}',	Shortest string "voi"
        case 55: // Recognized '{Identifier}',	Shortest string "vec"
        case 56: // Recognized '{Identifier}',	Shortest string "vect"
        case 57: // Recognized '{Identifier}',	Shortest string "vecto"
        case 59: // Recognized '{Identifier}',	Shortest string "ta"
        case 60: // Recognized '{Identifier}',	Shortest string "tal"
        case 61: // Recognized '{Identifier}',	Shortest string "tale"
        case 62: // Recognized '{Identifier}',	Shortest string "talen"
        case 64: // Recognized '{Identifier}',	Shortest string "st"
        case 65: // Recognized '{Identifier}',	Shortest string "sw"
        case 66: // Recognized '{Identifier}',	Shortest string "swi"
        case 67: // Recognized '{Identifier}',	Shortest string "swit"
        case 68: // Recognized '{Identifier}',	Shortest string "switc"
        case 70: // Recognized '{Identifier}',	Shortest string "str"
        case 71: // Recognized '{Identifier}',	Shortest string "stri"
        case 72: // Recognized '{Identifier}',	Shortest string "stru"
        case 73: // Recognized '{Identifier}',	Shortest string "struc"
        case 75: // Recognized '{Identifier}',	Shortest string "strin"
        case 77: // Recognized '{Identifier}',	Shortest string "re"
        case 78: // Recognized '{Identifier}',	Shortest string "ret"
        case 79: // Recognized '{Identifier}',	Shortest string "retu"
        case 80: // Recognized '{Identifier}',	Shortest string "retur"
        case 82: // Recognized '{Identifier}',	Shortest string "ob"
        case 83: // Recognized '{Identifier}',	Shortest string "obj"
        case 84: // Recognized '{Identifier}',	Shortest string "obje"
        case 85: // Recognized '{Identifier}',	Shortest string "objec"
        case 87: // Recognized '{Identifier}',	Shortest string "no"
        case 89: // Recognized '{Identifier}',	Shortest string "lo"
        case 90: // Recognized '{Identifier}',	Shortest string "loc"
        case 91: // Recognized '{Identifier}',	Shortest string "loca"
        case 92: // Recognized '{Identifier}',	Shortest string "locat"
        case 93: // Recognized '{Identifier}',	Shortest string "locati"
        case 94: // Recognized '{Identifier}',	Shortest string "locatio"
        case 97: // Recognized '{Identifier}',	Shortest string "in"
        case 98: // Recognized '{Identifier}',	Shortest string "it"
        case 99: // Recognized '{Identifier}',	Shortest string "ite"
        case 100: // Recognized '{Identifier}',	Shortest string "item"
        case 101: // Recognized '{Identifier}',	Shortest string "itemp"
        case 102: // Recognized '{Identifier}',	Shortest string "itempr"
        case 103: // Recognized '{Identifier}',	Shortest string "itempro"
        case 104: // Recognized '{Identifier}',	Shortest string "itemprop"
        case 105: // Recognized '{Identifier}',	Shortest string "itemprope"
        case 106: // Recognized '{Identifier}',	Shortest string "itemproper"
        case 107: // Recognized '{Identifier}',	Shortest string "itempropert"
        case 110: // Recognized '{Identifier}',	Shortest string "fl"
        case 111: // Recognized '{Identifier}',	Shortest string "flo"
        case 112: // Recognized '{Identifier}',	Shortest string "floa"
        case 114: // Recognized '{Identifier}',	Shortest string "ef"
        case 115: // Recognized '{Identifier}',	Shortest string "el"
        case 116: // Recognized '{Identifier}',	Shortest string "ev"
        case 117: // Recognized '{Identifier}',	Shortest string "eve"
        case 118: // Recognized '{Identifier}',	Shortest string "even"
        case 120: // Recognized '{Identifier}',	Shortest string "els"
        case 122: // Recognized '{Identifier}',	Shortest string "eff"
        case 123: // Recognized '{Identifier}',	Shortest string "effe"
        case 124: // Recognized '{Identifier}',	Shortest string "effec"
        case 126: // Recognized '{Identifier}',	Shortest string "de"
        case 128: // Recognized '{Identifier}',	Shortest string "def"
        case 129: // Recognized '{Identifier}',	Shortest string "defa"
        case 130: // Recognized '{Identifier}',	Shortest string "defau"
        case 131: // Recognized '{Identifier}',	Shortest string "defaul"
        case 133: // Recognized '{Identifier}',	Shortest string "ca"
        case 134: // Recognized '{Identifier}',	Shortest string "co"
        case 135: // Recognized '{Identifier}',	Shortest string "con"
        case 136: // Recognized '{Identifier}',	Shortest string "cont"
        case 137: // Recognized '{Identifier}',	Shortest string "conti"
        case 138: // Recognized '{Identifier}',	Shortest string "contin"
        case 139: // Recognized '{Identifier}',	Shortest string "continu"
        case 141: // Recognized '{Identifier}',	Shortest string "cas"
        case 143: // Recognized '{Identifier}',	Shortest string "br"
        case 144: // Recognized '{Identifier}',	Shortest string "bre"
        case 145: // Recognized '{Identifier}',	Shortest string "brea"
        case 147: // Recognized '{Identifier}',	Shortest string "ac"
        case 148: // Recognized '{Identifier}',	Shortest string "act"
        case 149: // Recognized '{Identifier}',	Shortest string "acti"
        case 150: // Recognized '{Identifier}',	Shortest string "actio"
        case 153: // Recognized '{Identifier}',	Shortest string "TR"
        case 154: // Recognized '{Identifier}',	Shortest string "TRU"
        case 156: // Recognized '{Identifier}',	Shortest string "OB"
        case 157: // Recognized '{Identifier}',	Shortest string "OBJ"
        case 158: // Recognized '{Identifier}',	Shortest string "OBJE"
        case 159: // Recognized '{Identifier}',	Shortest string "OBJEC"
        case 160: // Recognized '{Identifier}',	Shortest string "OBJECT"
        case 161: // Recognized '{Identifier}',	Shortest string "OBJECT_"
        case 162: // Recognized '{Identifier}',	Shortest string "OBJECT_I"
        case 163: // Recognized '{Identifier}',	Shortest string "OBJECT_S"
        case 164: // Recognized '{Identifier}',	Shortest string "OBJECT_SE"
        case 165: // Recognized '{Identifier}',	Shortest string "OBJECT_SEL"
        case 167: // Recognized '{Identifier}',	Shortest string "OBJECT_IN"
        case 168: // Recognized '{Identifier}',	Shortest string "OBJECT_INV"
        case 169: // Recognized '{Identifier}',	Shortest string "OBJECT_INVA"
        case 170: // Recognized '{Identifier}',	Shortest string "OBJECT_INVAL"
        case 171: // Recognized '{Identifier}',	Shortest string "OBJECT_INVALI"
        case 173: // Recognized '{Identifier}',	Shortest string "FA"
        case 174: // Recognized '{Identifier}',	Shortest string "FAL"
        case 175: // Recognized '{Identifier}',	Shortest string "FALS"
yylval.text=yytext; return (int)Token.IDENTIFIER;
            break;
        case 23: // Recognized '{BitwiseXorOp}',	Shortest string "^"
return (int)Token.OP_BITWISE_XOR;
            break;
        case 39: // Recognized '{LBRACE}',	Shortest string "{"
return '{';
            break;
        case 40: // Recognized '{BitwiseOrOp}',	Shortest string "|"
return (int)Token.OP_BITWISE_OR;
            break;
        case 41: // Recognized '{RBRACE}',	Shortest string "}"
return '}';
            break;
        case 42: // Recognized '{BitwiseNotOp}',	Shortest string "~"
return (int)Token.OP_BITWISE_NOT;
            break;
        case 43: // Recognized '{LogicalOrOp}',	Shortest string "||"
return (int)Token.OP_LOGICAL_OR;
            break;
        case 48: // Recognized '{While}',	Shortest string "while"
return (int)Token.FLOW_WHILE;
            break;
        case 50: // Recognized '{For}',	Shortest string "wall"
return (int)Token.FLOW_FOR;
            break;
        case 54: // Recognized '{Void}',	Shortest string "void"
yylval.datatype = DataType.Void; return (int)Token.TYPE_VOID;
            break;
        case 58: // Recognized '{Vector}',	Shortest string "vector"
yylval.datatype = DataType.Vector; return (int)Token.TYPE_VECTOR;
            break;
        case 63: // Recognized '{Talent}',	Shortest string "talent"
yylval.datatype = DataType.Talent; return (int)Token.TYPE_TALENT;
            break;
        case 69: // Recognized '{Switch}',	Shortest string "switch"
return (int)Token.FLOW_SWITCH;
            break;
        case 74: // Recognized '{Struct}',	Shortest string "struct"
return (int)Token.TYPE_STRUCT;
            break;
        case 76: // Recognized '{String}',	Shortest string "string"
yylval.datatype = DataType.String; return (int)Token.TYPE_STRING;
            break;
        case 81: // Recognized '{Return}',	Shortest string "return"
return (int)Token.FLOW_RETURN;
            break;
        case 86: // Recognized '{Object}',	Shortest string "object"
yylval.datatype = DataType.Object; return (int)Token.TYPE_OBJECT;
            break;
        case 88: // Recognized '{NOP}',	Shortest string "nop"
return (int)Token.NOP;
            break;
        case 95: // Recognized '{Location}',	Shortest string "location"
yylval.datatype = DataType.Location; return (int)Token.TYPE_LOCATION;
            break;
        case 96: // Recognized '{If}',	Shortest string "if"
return (int)Token.FLOW_IF;
            break;
        case 108: // Recognized '{ItemProperty}',	Shortest string "itemproperty"
yylval.datatype = DataType.ItemProperty; return (int)Token.TYPE_ITEM_PROPERTY;
            break;
        case 109: // Recognized '{Int}',	Shortest string "int"
yylval.datatype = DataType.Int; return (int)Token.TYPE_INT;
            break;
        case 113: // Recognized '{Float}',	Shortest string "float"
yylval.datatype = DataType.Float; return (int)Token.TYPE_FLOAT;
            break;
        case 119: // Recognized '{Event}',	Shortest string "event"
yylval.datatype = DataType.Event; return (int)Token.TYPE_EVENT;
            break;
        case 121: // Recognized '{Else}',	Shortest string "else"
return (int)Token.FLOW_ELSE;
            break;
        case 125: // Recognized '{Effect}',	Shortest string "effect"
yylval.datatype = DataType.Effect; return (int)Token.TYPE_EFFECT;
            break;
        case 127: // Recognized '{Do}',	Shortest string "do"
return (int)Token.FLOW_DO;
            break;
        case 132: // Recognized '{Default}',	Shortest string "default"
return (int)Token.FLOW_DEFAULT;
            break;
        case 140: // Recognized '{Continue}',	Shortest string "continue"
return (int)Token.FLOW_CONTINUE;
            break;
        case 142: // Recognized '{Case}',	Shortest string "case"
return (int)Token.FLOW_CASE;
            break;
        case 146: // Recognized '{Break}',	Shortest string "break"
return (int)Token.FLOW_BREAK;
            break;
        case 151: // Recognized '{Action}',	Shortest string "action"
yylval.datatype = DataType.Action; return (int)Token.TYPE_ACTION;
            break;
        case 152: // Recognized '{LesserOrEqualOp}',	Shortest string "\\<="
return (int)Token.OP_LESS_THAN_OR_EQUAL;
            break;
        case 155: // Recognized '{True}',	Shortest string "TRUE"
return (int)Token.VALUE_TRUE;
            break;
        case 166: // Recognized '{ObjectSelf}',	Shortest string "OBJECT_SELF"
return (int)Token.VALUE_OBJECT_SELF;
            break;
        case 172: // Recognized '{ObjectInvalid}',	Shortest string "OBJECT_INVALID"
return (int)Token.VALUE_OBJECT_INVALID;
            break;
        case 176: // Recognized '{False}',	Shortest string "FALSE"
return (int)Token.VALUE_FALSE;
            break;
        case 177: // Recognized '{GreaterOrEqualOp}',	Shortest string ">="
return (int)Token.OP_GREATER_THAN_OR_EQUAL;
            break;
        case 178: // Recognized '{BitwiseRightOp}',	Shortest string ">>"
return (int)Token.OP_BITWISE_RIGHT;
            break;
        case 179: // Recognized '{EqualityOp}',	Shortest string "=="
return (int)Token.OP_EQUALITY;
            break;
        case 180: // Recognized '{BitwiseLeftOp}',	Shortest string "<<"
return (int)Token.OP_BITWISE_LEFT;
            break;
        case 182: // Recognized '{FloatLiteral}',	Shortest string "0f"
        case 183: // Recognized '{FloatLiteral}',	Shortest string "0.0"
yylval.numberf=Single.Parse(yytext); return (int)Token.LITERAL_FLOAT;
            break;
        case 184: // Recognized '{HexLiteral}',	Shortest string "0x0"
return (int)Token.LITERAL_INT_HEX;
            break;
        case 185: // Recognized '{DivisionAssignment}',	Shortest string "/="
return (int)Token.ASSIGNMENT_DIVISION;
            break;
        case 186: // Recognized '{Comment}',	Shortest string "//\n"
return (int)Token.COMMENT_INLINE;
            break;
        case 187: // Recognized '{MultilineComment}',	Shortest string "/**/"
return (int)Token.COMMENT_MULTILINE;
            break;
        case 188: // Recognized '{DecrementOp}',	Shortest string "--"
return (int)Token.OP_DECREMENT;
            break;
        case 189: // Recognized '{SubtractAssignemnt}',	Shortest string "-="
return (int)Token.ASSIGNMENT_SUBTRACT;
            break;
        case 190: // Recognized '{IncrementOp}',	Shortest string "++"
return (int)Token.OP_INCREMENT;
            break;
        case 191: // Recognized '{AddAssignment}',	Shortest string "+="
return (int)Token.ASSIGNMENT_ADD;
            break;
        case 192: // Recognized '{MultiplyAssignment}',	Shortest string "*="
return (int)Token.ASSIGNMENT_MULTIPLY;
            break;
        case 193: // Recognized '{LogicalAndOp}',	Shortest string "&&"
return (int)Token.OP_LOGICAL_AND;
            break;
        case 194: // Recognized '{Include}',	Shortest string "#include"
return (int)Token.INCLUDE;
            break;
        case 195: // Recognized '{StringLiteral}',	Shortest string "\"\""
yylval.text=yytext; return (int)Token.LITERAL_STRING;
            break;
        case 196: // Recognized '{InequalityOp}',	Shortest string "!="
return (int)Token.OP_INEQUALITY;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner


} // end namespace
